
ReceiverCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000446  000004da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000446  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800104  00800104  000004de  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004f3  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a3  00000000  00000000  00000a8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000020d  00000000  00000000  00000c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00000e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000229  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ce  00000000  00000000  00001101  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  000017cf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 13 01 	jmp	0x226	; 0x226 <__vector_12>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e6 e4       	ldi	r30, 0x46	; 70
  90:	f4 e0       	ldi	r31, 0x04	; 4
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a4 30       	cpi	r26, 0x04	; 4
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a4 e0       	ldi	r26, 0x04	; 4
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 31       	cpi	r26, 0x14	; 20
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 84 01 	call	0x308	; 0x308 <main>
  b2:	0c 94 21 02 	jmp	0x442	; 0x442 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <interrupt_init>:
{
	TCCR1B=0x42;	//Enable input capture, clk = F_CPU/8
}
void interrupt_init() // initialize interrupts
{
	cli();
  ba:	f8 94       	cli
	TIMSK1=0x20; //Input capture interrupt enable
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	80 93 6f 00 	sts	0x006F, r24
  c2:	08 95       	ret

000000c4 <USART_init>:

}

void USART_init()
{
	UCSR0A = 0;
  c4:	10 92 c0 00 	sts	0x00C0, r1
	UCSR0B = 0x98;   // Turn on RX0, TX0, and RX0 Interrupt
  c8:	88 e9       	ldi	r24, 0x98	; 152
  ca:	80 93 c1 00 	sts	0x00C1, r24
	UCSR0C = 0x06; // Use Async, Odd Parity, 1 Stop bit,  8-bit character sizes
  ce:	86 e0       	ldi	r24, 0x06	; 6
  d0:	80 93 c2 00 	sts	0x00C2, r24
	UBRR0 = 0x33; // Set baud rate to 9600
  d4:	83 e3       	ldi	r24, 0x33	; 51
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 c5 00 	sts	0x00C5, r25
  dc:	80 93 c4 00 	sts	0x00C4, r24
  e0:	08 95       	ret

000000e2 <playSound>:
}

void playSound(int freq) //Plays sound to indicate hit or death
{
  e2:	bc 01       	movw	r22, r24
	int x = 0;
	int repeat = 0;
	
	if(health > 0){
  e4:	20 91 02 01 	lds	r18, 0x0102
  e8:	30 91 03 01 	lds	r19, 0x0103
  ec:	12 16       	cp	r1, r18
  ee:	13 06       	cpc	r1, r19
  f0:	dc f0       	brlt	.+54     	; 0x128 <playSound+0x46>
  f2:	27 c0       	rjmp	.+78     	; 0x142 <playSound+0x60>
		while( repeat != 3 ){
			x = 0;
			while(x != 200){ //play a sound for hit
				PORTA = 0b00000001;
  f4:	22 b9       	out	0x02, r18	; 2
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f6:	a3 ef       	ldi	r26, 0xF3	; 243
  f8:	b1 e0       	ldi	r27, 0x01	; 1
  fa:	11 97       	sbiw	r26, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <playSound+0x18>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <playSound+0x1e>
 100:	00 00       	nop
				_delay_ms(2);
				PORTA = 0b00000000;
 102:	12 b8       	out	0x02, r1	; 2
 104:	e3 ef       	ldi	r30, 0xF3	; 243
 106:	f1 e0       	ldi	r31, 0x01	; 1
 108:	31 97       	sbiw	r30, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <playSound+0x26>
 10c:	00 c0       	rjmp	.+0      	; 0x10e <playSound+0x2c>
 10e:	00 00       	nop
 110:	01 97       	sbiw	r24, 0x01	; 1
	int repeat = 0;
	
	if(health > 0){
		while( repeat != 3 ){
			x = 0;
			while(x != 200){ //play a sound for hit
 112:	81 f7       	brne	.-32     	; 0xf4 <playSound+0x12>
 114:	8f e4       	ldi	r24, 0x4F	; 79
 116:	93 ec       	ldi	r25, 0xC3	; 195
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <playSound+0x36>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <playSound+0x3c>
 11e:	00 00       	nop
 120:	41 50       	subi	r20, 0x01	; 1
 122:	51 09       	sbc	r21, r1
{
	int x = 0;
	int repeat = 0;
	
	if(health > 0){
		while( repeat != 3 ){
 124:	31 f4       	brne	.+12     	; 0x132 <playSound+0x50>
 126:	08 c0       	rjmp	.+16     	; 0x138 <playSound+0x56>
 128:	43 e0       	ldi	r20, 0x03	; 3
 12a:	50 e0       	ldi	r21, 0x00	; 0
	UCSR0C = 0x06; // Use Async, Odd Parity, 1 Stop bit,  8-bit character sizes
	UBRR0 = 0x33; // Set baud rate to 9600
}

void playSound(int freq) //Plays sound to indicate hit or death
{
 12c:	68 ec       	ldi	r22, 0xC8	; 200
 12e:	30 e0       	ldi	r19, 0x00	; 0
	
	if(health > 0){
		while( repeat != 3 ){
			x = 0;
			while(x != 200){ //play a sound for hit
				PORTA = 0b00000001;
 130:	21 e0       	ldi	r18, 0x01	; 1
	UCSR0C = 0x06; // Use Async, Odd Parity, 1 Stop bit,  8-bit character sizes
	UBRR0 = 0x33; // Set baud rate to 9600
}

void playSound(int freq) //Plays sound to indicate hit or death
{
 132:	86 2f       	mov	r24, r22
 134:	93 2f       	mov	r25, r19
 136:	de cf       	rjmp	.-68     	; 0xf4 <playSound+0x12>
				x++;
			}
			repeat++;
			_delay_ms(200);
		}
		UDR0 = Hit;
 138:	80 91 01 01 	lds	r24, 0x0101
 13c:	80 93 c6 00 	sts	0x00C6, r24
		return;
 140:	08 95       	ret
	} else if(health <= 0){
 142:	80 91 02 01 	lds	r24, 0x0102
 146:	90 91 03 01 	lds	r25, 0x0103
 14a:	18 16       	cp	r1, r24
 14c:	19 06       	cpc	r1, r25
 14e:	0c f4       	brge	.+2      	; 0x152 <playSound+0x70>
 150:	69 c0       	rjmp	.+210    	; 0x224 <playSound+0x142>
		UDR0 = Dead;
 152:	80 91 00 01 	lds	r24, 0x0100
 156:	80 93 c6 00 	sts	0x00C6, r24
 15a:	48 e0       	ldi	r20, 0x08	; 8
 15c:	50 e0       	ldi	r21, 0x00	; 0
 15e:	e8 ec       	ldi	r30, 0xC8	; 200
 160:	80 e0       	ldi	r24, 0x00	; 0
		while(repeat != 8){
			x = 0;
			while(x!=200){ //play a sound for hit
				PORTA = 0b00000001;
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	1a c0       	rjmp	.+52     	; 0x19a <playSound+0xb8>
 166:	92 b9       	out	0x02, r25	; 2
 168:	a3 ef       	ldi	r26, 0xF3	; 243
 16a:	b1 e0       	ldi	r27, 0x01	; 1
 16c:	11 97       	sbiw	r26, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <playSound+0x8a>
 170:	00 c0       	rjmp	.+0      	; 0x172 <playSound+0x90>
 172:	00 00       	nop
				_delay_ms(2);
				PORTA = 0b00000000;
 174:	12 b8       	out	0x02, r1	; 2
 176:	a3 ef       	ldi	r26, 0xF3	; 243
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	11 97       	sbiw	r26, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <playSound+0x98>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <playSound+0x9e>
 180:	00 00       	nop
 182:	21 50       	subi	r18, 0x01	; 1
 184:	31 09       	sbc	r19, r1
		return;
	} else if(health <= 0){
		UDR0 = Dead;
		while(repeat != 8){
			x = 0;
			while(x!=200){ //play a sound for hit
 186:	79 f7       	brne	.-34     	; 0x166 <playSound+0x84>
 188:	af e4       	ldi	r26, 0x4F	; 79
 18a:	b3 ec       	ldi	r27, 0xC3	; 195
 18c:	11 97       	sbiw	r26, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <playSound+0xaa>
 190:	00 c0       	rjmp	.+0      	; 0x192 <playSound+0xb0>
 192:	00 00       	nop
 194:	41 50       	subi	r20, 0x01	; 1
 196:	51 09       	sbc	r21, r1
		}
		UDR0 = Hit;
		return;
	} else if(health <= 0){
		UDR0 = Dead;
		while(repeat != 8){
 198:	19 f0       	breq	.+6      	; 0x1a0 <playSound+0xbe>
 19a:	2e 2f       	mov	r18, r30
 19c:	38 2f       	mov	r19, r24
 19e:	e3 cf       	rjmp	.-58     	; 0x166 <playSound+0x84>
 1a0:	28 e9       	ldi	r18, 0x98	; 152
 1a2:	38 e0       	ldi	r19, 0x08	; 8
			repeat++;
			_delay_ms(200);
		}
		x = 0;
		while(x!=2200){ //Dead indicator
			PORTA = 0b00000001;
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	92 b9       	out	0x02, r25	; 2
 1a8:	e7 ee       	ldi	r30, 0xE7	; 231
 1aa:	f3 e0       	ldi	r31, 0x03	; 3
 1ac:	31 97       	sbiw	r30, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <playSound+0xca>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <playSound+0xd0>
 1b2:	00 00       	nop
			_delay_ms(4);
			PORTA = 0b00000000;
 1b4:	12 b8       	out	0x02, r1	; 2
 1b6:	a7 ee       	ldi	r26, 0xE7	; 231
 1b8:	b3 e0       	ldi	r27, 0x03	; 3
 1ba:	11 97       	sbiw	r26, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <playSound+0xd8>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <playSound+0xde>
 1c0:	00 00       	nop
 1c2:	21 50       	subi	r18, 0x01	; 1
 1c4:	31 09       	sbc	r19, r1
			}
			repeat++;
			_delay_ms(200);
		}
		x = 0;
		while(x!=2200){ //Dead indicator
 1c6:	79 f7       	brne	.-34     	; 0x1a6 <playSound+0xc4>
			PORTA = 0b00000000;
			_delay_ms(4);
			x++;
		}
		//Determine who killed you
		player = (freq / 100);
 1c8:	cb 01       	movw	r24, r22
 1ca:	64 e6       	ldi	r22, 0x64	; 100
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <__divmodhi4>
 1d2:	60 93 0a 01 	sts	0x010A, r22
 1d6:	70 93 0b 01 	sts	0x010B, r23
		UDR0 = player + '0';
 1da:	60 5d       	subi	r22, 0xD0	; 208
 1dc:	60 93 c6 00 	sts	0x00C6, r22
 1e0:	bf ef       	ldi	r27, 0xFF	; 255
 1e2:	e1 e1       	ldi	r30, 0x11	; 17
 1e4:	fa e7       	ldi	r31, 0x7A	; 122
 1e6:	b1 50       	subi	r27, 0x01	; 1
 1e8:	e0 40       	sbci	r30, 0x00	; 0
 1ea:	f0 40       	sbci	r31, 0x00	; 0
 1ec:	e1 f7       	brne	.-8      	; 0x1e6 <playSound+0x104>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <playSound+0x10e>
 1f0:	00 00       	nop
 1f2:	8c ed       	ldi	r24, 0xDC	; 220
 1f4:	95 e0       	ldi	r25, 0x05	; 5
		
		//Wait for respawn
		_delay_ms(40000);
		x = 0;
		while(x!=1500){ //sound for respawn
			PORTA = 0b00000001;
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	22 b9       	out	0x02, r18	; 2
 1fa:	a3 ef       	ldi	r26, 0xF3	; 243
 1fc:	b1 e0       	ldi	r27, 0x01	; 1
 1fe:	11 97       	sbiw	r26, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <playSound+0x11c>
 202:	00 c0       	rjmp	.+0      	; 0x204 <playSound+0x122>
 204:	00 00       	nop
			_delay_ms(2);
			PORTA = 0b00000000;
 206:	12 b8       	out	0x02, r1	; 2
 208:	e3 ef       	ldi	r30, 0xF3	; 243
 20a:	f1 e0       	ldi	r31, 0x01	; 1
 20c:	31 97       	sbiw	r30, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <playSound+0x12a>
 210:	00 c0       	rjmp	.+0      	; 0x212 <playSound+0x130>
 212:	00 00       	nop
 214:	01 97       	sbiw	r24, 0x01	; 1
		UDR0 = player + '0';
		
		//Wait for respawn
		_delay_ms(40000);
		x = 0;
		while(x!=1500){ //sound for respawn
 216:	81 f7       	brne	.-32     	; 0x1f8 <playSound+0x116>
			_delay_ms(2);
			PORTA = 0b00000000;
			_delay_ms(2);
			x++;
		}
		health = 100; //Good to go
 218:	84 e6       	ldi	r24, 0x64	; 100
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	90 93 03 01 	sts	0x0103, r25
 220:	80 93 02 01 	sts	0x0102, r24
 224:	08 95       	ret

00000226 <__vector_12>:
	}
}

ISR (TIMER1_CAPT_vect)
{	
 226:	1f 92       	push	r1
 228:	0f 92       	push	r0
 22a:	0f b6       	in	r0, 0x3f	; 63
 22c:	0f 92       	push	r0
 22e:	11 24       	eor	r1, r1
 230:	2f 93       	push	r18
 232:	3f 93       	push	r19
 234:	4f 93       	push	r20
 236:	5f 93       	push	r21
 238:	8f 93       	push	r24
 23a:	9f 93       	push	r25
	if(sample >= 30){ //We have our sample size, get out
 23c:	80 91 06 01 	lds	r24, 0x0106
 240:	90 91 07 01 	lds	r25, 0x0107
 244:	8e 31       	cpi	r24, 0x1E	; 30
 246:	91 05       	cpc	r25, r1
 248:	38 f0       	brcs	.+14     	; 0x258 <__vector_12+0x32>
		signal = 2;	//Signal main that data is ready for frequency calculation
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	90 93 05 01 	sts	0x0105, r25
 252:	80 93 04 01 	sts	0x0104, r24
		return;
 256:	4d c0       	rjmp	.+154    	; 0x2f2 <__vector_12+0xcc>
	}
	
	if(signal == 0){ //new shot, record first value and get out
 258:	20 91 04 01 	lds	r18, 0x0104
 25c:	30 91 05 01 	lds	r19, 0x0105
 260:	23 2b       	or	r18, r19
 262:	79 f4       	brne	.+30     	; 0x282 <__vector_12+0x5c>
		counts_prev = ICR1;	// Get new count
 264:	80 91 86 00 	lds	r24, 0x0086
 268:	90 91 87 00 	lds	r25, 0x0087
 26c:	90 93 0f 01 	sts	0x010F, r25
 270:	80 93 0e 01 	sts	0x010E, r24
		signal = 1; //indicate sample size not done yet
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	90 93 05 01 	sts	0x0105, r25
 27c:	80 93 04 01 	sts	0x0104, r24
		return;
 280:	38 c0       	rjmp	.+112    	; 0x2f2 <__vector_12+0xcc>
	} 
	if(signal == 1){
 282:	20 91 04 01 	lds	r18, 0x0104
 286:	30 91 05 01 	lds	r19, 0x0105
 28a:	21 30       	cpi	r18, 0x01	; 1
 28c:	31 05       	cpc	r19, r1
 28e:	89 f5       	brne	.+98     	; 0x2f2 <__vector_12+0xcc>
		counts_new = ICR1;	// Get new count
 290:	20 91 86 00 	lds	r18, 0x0086
 294:	30 91 87 00 	lds	r19, 0x0087
 298:	30 93 13 01 	sts	0x0113, r19
 29c:	20 93 12 01 	sts	0x0112, r18
		duration = counts_new - counts_prev; //subtract current count from last count
 2a0:	20 91 12 01 	lds	r18, 0x0112
 2a4:	30 91 13 01 	lds	r19, 0x0113
 2a8:	40 91 0e 01 	lds	r20, 0x010E
 2ac:	50 91 0f 01 	lds	r21, 0x010F
 2b0:	24 1b       	sub	r18, r20
 2b2:	35 0b       	sbc	r19, r21
 2b4:	30 93 11 01 	sts	0x0111, r19
 2b8:	20 93 10 01 	sts	0x0110, r18
		total += duration; //sum all the counts within the sample size
 2bc:	20 91 10 01 	lds	r18, 0x0110
 2c0:	30 91 11 01 	lds	r19, 0x0111
 2c4:	40 91 08 01 	lds	r20, 0x0108
 2c8:	50 91 09 01 	lds	r21, 0x0109
 2cc:	24 0f       	add	r18, r20
 2ce:	35 1f       	adc	r19, r21
 2d0:	30 93 09 01 	sts	0x0109, r19
 2d4:	20 93 08 01 	sts	0x0108, r18
		sample += 1; //increment sample counter
 2d8:	01 96       	adiw	r24, 0x01	; 1
 2da:	90 93 07 01 	sts	0x0107, r25
 2de:	80 93 06 01 	sts	0x0106, r24
		counts_prev = counts_new; //set current IC to last IC
 2e2:	80 91 12 01 	lds	r24, 0x0112
 2e6:	90 91 13 01 	lds	r25, 0x0113
 2ea:	90 93 0f 01 	sts	0x010F, r25
 2ee:	80 93 0e 01 	sts	0x010E, r24
	}
}
 2f2:	9f 91       	pop	r25
 2f4:	8f 91       	pop	r24
 2f6:	5f 91       	pop	r21
 2f8:	4f 91       	pop	r20
 2fa:	3f 91       	pop	r19
 2fc:	2f 91       	pop	r18
 2fe:	0f 90       	pop	r0
 300:	0f be       	out	0x3f, r0	; 63
 302:	0f 90       	pop	r0
 304:	1f 90       	pop	r1
 306:	18 95       	reti

00000308 <main>:

volatile int signal = 0; //Signal to differentiate first IC interrupt from the rest. 0 means nothing, 1 means new signal, 2 means done with sampling

void TC_init()//Initialize Timer Counter
{
	TCCR1B=0x42;	//Enable input capture, clk = F_CPU/8
 308:	82 e4       	ldi	r24, 0x42	; 66
 30a:	80 93 81 00 	sts	0x0081, r24


int main (void)
{
	TC_init();
	interrupt_init();
 30e:	0e 94 5d 00 	call	0xba	; 0xba <interrupt_init>
	USART_init();
 312:	0e 94 62 00 	call	0xc4	; 0xc4 <USART_init>
	DDRA = 0b00000001; //set direction of PORTA, A0 is output for speaker
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	81 b9       	out	0x01, r24	; 1

	
	sei();                    // turn on interrupts
 31a:	78 94       	sei
while (1)
{	
	if( signal == 2 )//Once signaled that we have enough samples, we calculate the frequency
	{	
		duration = total / sample; //Find average duration
		freq = (unsigned int)(99990ul / (unsigned long)duration); //calculate frequency
 31c:	0f 2e       	mov	r0, r31
 31e:	f6 e9       	ldi	r31, 0x96	; 150
 320:	cf 2e       	mov	r12, r31
 322:	f6 e8       	ldi	r31, 0x86	; 134
 324:	df 2e       	mov	r13, r31
 326:	ee 24       	eor	r14, r14
 328:	e3 94       	inc	r14
 32a:	f1 2c       	mov	r15, r1
 32c:	f0 2d       	mov	r31, r0
	
	sei();                    // turn on interrupts
	
while (1)
{	
	if( signal == 2 )//Once signaled that we have enough samples, we calculate the frequency
 32e:	80 91 04 01 	lds	r24, 0x0104
 332:	90 91 05 01 	lds	r25, 0x0105
 336:	02 97       	sbiw	r24, 0x02	; 2
 338:	d1 f7       	brne	.-12     	; 0x32e <main+0x26>
	{	
		duration = total / sample; //Find average duration
 33a:	80 91 08 01 	lds	r24, 0x0108
 33e:	90 91 09 01 	lds	r25, 0x0109
 342:	60 91 06 01 	lds	r22, 0x0106
 346:	70 91 07 01 	lds	r23, 0x0107
 34a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__udivmodhi4>
 34e:	70 93 11 01 	sts	0x0111, r23
 352:	60 93 10 01 	sts	0x0110, r22
		freq = (unsigned int)(99990ul / (unsigned long)duration); //calculate frequency
 356:	20 91 10 01 	lds	r18, 0x0110
 35a:	30 91 11 01 	lds	r19, 0x0111
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	c7 01       	movw	r24, r14
 364:	b6 01       	movw	r22, r12
 366:	0e 94 ff 01 	call	0x3fe	; 0x3fe <__udivmodsi4>
 36a:	30 93 0d 01 	sts	0x010D, r19
 36e:	20 93 0c 01 	sts	0x010C, r18
		
		//If hit was valid, take away health from player and go into method that plays appropriate sounds
		if(freq > 200 && freq < 260){ 
 372:	c9 01       	movw	r24, r18
 374:	89 5c       	subi	r24, 0xC9	; 201
 376:	91 09       	sbc	r25, r1
 378:	cb 97       	sbiw	r24, 0x3b	; 59
 37a:	60 f4       	brcc	.+24     	; 0x394 <main+0x8c>
			health -= 30;
 37c:	80 91 02 01 	lds	r24, 0x0102
 380:	90 91 03 01 	lds	r25, 0x0103
 384:	4e 97       	sbiw	r24, 0x1e	; 30
 386:	90 93 03 01 	sts	0x0103, r25
 38a:	80 93 02 01 	sts	0x0102, r24
			playSound(freq);
 38e:	c9 01       	movw	r24, r18
 390:	0e 94 71 00 	call	0xe2	; 0xe2 <playSound>
		}
	
		signal = 0;
 394:	10 92 05 01 	sts	0x0105, r1
 398:	10 92 04 01 	sts	0x0104, r1
		total = 0;
 39c:	10 92 09 01 	sts	0x0109, r1
 3a0:	10 92 08 01 	sts	0x0108, r1
		sample = 0;
 3a4:	10 92 07 01 	sts	0x0107, r1
 3a8:	10 92 06 01 	sts	0x0106, r1
 3ac:	c0 cf       	rjmp	.-128    	; 0x32e <main+0x26>

000003ae <__udivmodhi4>:
 3ae:	aa 1b       	sub	r26, r26
 3b0:	bb 1b       	sub	r27, r27
 3b2:	51 e1       	ldi	r21, 0x11	; 17
 3b4:	07 c0       	rjmp	.+14     	; 0x3c4 <__udivmodhi4_ep>

000003b6 <__udivmodhi4_loop>:
 3b6:	aa 1f       	adc	r26, r26
 3b8:	bb 1f       	adc	r27, r27
 3ba:	a6 17       	cp	r26, r22
 3bc:	b7 07       	cpc	r27, r23
 3be:	10 f0       	brcs	.+4      	; 0x3c4 <__udivmodhi4_ep>
 3c0:	a6 1b       	sub	r26, r22
 3c2:	b7 0b       	sbc	r27, r23

000003c4 <__udivmodhi4_ep>:
 3c4:	88 1f       	adc	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	5a 95       	dec	r21
 3ca:	a9 f7       	brne	.-22     	; 0x3b6 <__udivmodhi4_loop>
 3cc:	80 95       	com	r24
 3ce:	90 95       	com	r25
 3d0:	bc 01       	movw	r22, r24
 3d2:	cd 01       	movw	r24, r26
 3d4:	08 95       	ret

000003d6 <__divmodhi4>:
 3d6:	97 fb       	bst	r25, 7
 3d8:	07 2e       	mov	r0, r23
 3da:	16 f4       	brtc	.+4      	; 0x3e0 <__divmodhi4+0xa>
 3dc:	00 94       	com	r0
 3de:	07 d0       	rcall	.+14     	; 0x3ee <__divmodhi4_neg1>
 3e0:	77 fd       	sbrc	r23, 7
 3e2:	09 d0       	rcall	.+18     	; 0x3f6 <__divmodhi4_neg2>
 3e4:	0e 94 d7 01 	call	0x3ae	; 0x3ae <__udivmodhi4>
 3e8:	07 fc       	sbrc	r0, 7
 3ea:	05 d0       	rcall	.+10     	; 0x3f6 <__divmodhi4_neg2>
 3ec:	3e f4       	brtc	.+14     	; 0x3fc <__divmodhi4_exit>

000003ee <__divmodhi4_neg1>:
 3ee:	90 95       	com	r25
 3f0:	81 95       	neg	r24
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
 3f4:	08 95       	ret

000003f6 <__divmodhi4_neg2>:
 3f6:	70 95       	com	r23
 3f8:	61 95       	neg	r22
 3fa:	7f 4f       	sbci	r23, 0xFF	; 255

000003fc <__divmodhi4_exit>:
 3fc:	08 95       	ret

000003fe <__udivmodsi4>:
 3fe:	a1 e2       	ldi	r26, 0x21	; 33
 400:	1a 2e       	mov	r1, r26
 402:	aa 1b       	sub	r26, r26
 404:	bb 1b       	sub	r27, r27
 406:	fd 01       	movw	r30, r26
 408:	0d c0       	rjmp	.+26     	; 0x424 <__udivmodsi4_ep>

0000040a <__udivmodsi4_loop>:
 40a:	aa 1f       	adc	r26, r26
 40c:	bb 1f       	adc	r27, r27
 40e:	ee 1f       	adc	r30, r30
 410:	ff 1f       	adc	r31, r31
 412:	a2 17       	cp	r26, r18
 414:	b3 07       	cpc	r27, r19
 416:	e4 07       	cpc	r30, r20
 418:	f5 07       	cpc	r31, r21
 41a:	20 f0       	brcs	.+8      	; 0x424 <__udivmodsi4_ep>
 41c:	a2 1b       	sub	r26, r18
 41e:	b3 0b       	sbc	r27, r19
 420:	e4 0b       	sbc	r30, r20
 422:	f5 0b       	sbc	r31, r21

00000424 <__udivmodsi4_ep>:
 424:	66 1f       	adc	r22, r22
 426:	77 1f       	adc	r23, r23
 428:	88 1f       	adc	r24, r24
 42a:	99 1f       	adc	r25, r25
 42c:	1a 94       	dec	r1
 42e:	69 f7       	brne	.-38     	; 0x40a <__udivmodsi4_loop>
 430:	60 95       	com	r22
 432:	70 95       	com	r23
 434:	80 95       	com	r24
 436:	90 95       	com	r25
 438:	9b 01       	movw	r18, r22
 43a:	ac 01       	movw	r20, r24
 43c:	bd 01       	movw	r22, r26
 43e:	cf 01       	movw	r24, r30
 440:	08 95       	ret

00000442 <_exit>:
 442:	f8 94       	cli

00000444 <__stop_program>:
 444:	ff cf       	rjmp	.-2      	; 0x444 <__stop_program>
